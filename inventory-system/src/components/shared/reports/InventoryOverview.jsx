import React, { useState, useEffect } from 'react';
import { useProducts } from '../../../hooks/useProducts';
import { useInventoryActivity } from '../../../hooks/useInventoryActivity';
import { useAuth } from '../../../contexts/AuthContext';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import '../css/report.css';
import '../css/InventoryOverview.css';

const formatCurrency = (amount) => {
  return `â‚±${amount.toLocaleString()}`;
};

const formatCurrencyForPDF = (amount) => {
  return `PHP ${amount.toLocaleString()}`;
};

const InventoryOverview = () => {
  const { user } = useAuth();
  const { data: products = [], isLoading: productsLoading } = useProducts();
  const { data: activities = [], isLoading: activitiesLoading } = useInventoryActivity();
  const [isExporting, setIsExporting] = useState(false);
  const [inventoryStats, setInventoryStats] = useState({
    totalProducts: 0,
    lowStockItems: 0,
    outOfStockItems: 0,
    totalValue: 0,
    newItems: [],
    stockUpdates: [],
    zeroStockItems: []
  });

  useEffect(() => {
    if (products.length > 0) {
      // Calculate inventory statistics
      const totalProducts = products.length;
      const lowStockItems = products.filter(p => p.stockQuantity > 0 && p.stockQuantity <= p.minStockLevel).length;
      const outOfStockItems = products.filter(p => p.stockQuantity === 0).length;
      const totalValue = products.reduce((sum, p) => sum + (p.price * p.stockQuantity), 0);

      // Get new items (created in last 7 days)
      const sevenDaysAgo = new Date();
      sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
      const newItems = products.filter(p => new Date(p.createdAt) >= sevenDaysAgo);

      // Get zero stock items
      const zeroStockItems = products.filter(p => p.stockQuantity === 0);

      // Get recent stock updates from activities
      const stockUpdates = activities
        .filter(a => a.action === 'STOCK_UPDATE' || a.action === 'PRODUCT_ADDED')
        .slice(0, 10); // Get last 10 updates

      setInventoryStats(prevStats => {
        const newStats = {
          totalProducts,
          lowStockItems,
          outOfStockItems,
          totalValue,
          newItems: newItems.slice(0, 5), // Show latest 5
          stockUpdates,
          zeroStockItems: zeroStockItems.slice(0, 5) // Show first 5
        };
        
        // Only update if the data has actually changed
        if (JSON.stringify(prevStats) !== JSON.stringify(newStats)) {
          return newStats;
        }
        return prevStats;
      });
    }
  }, [products.length, activities.length]); // Only depend on lengths to prevent infinite loops

  const exportToPDF = async () => {
    setIsExporting(true);
    
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.width;
      const pageHeight = doc.internal.pageSize.height;
      const margin = 20;
      let yPosition = margin;

      // Header
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('Inventory Overview Report', margin, yPosition);
      yPosition += 10;

      // Company info and date
      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const currentDate = new Date().toLocaleDateString();
      const currentTime = new Date().toLocaleTimeString();
      doc.text(`Generated on: ${currentDate} at ${currentTime}`, margin, yPosition);
      doc.text(`Generated by: ${user?.name || 'System User'}`, pageWidth - margin - 60, yPosition);
      yPosition += 20;

      // Summary metrics
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Inventory Summary', margin, yPosition);
      yPosition += 10;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      const summaryData = [
        ['Total Products', inventoryStats.totalProducts.toString()],
        ['Low Stock Items', inventoryStats.lowStockItems.toString()],
        ['Out of Stock Items', inventoryStats.outOfStockItems.toString()],
        ['Total Inventory Value', formatCurrencyForPDF(inventoryStats.totalValue)]
      ];

      autoTable(doc, {
        startY: yPosition,
        head: [['Metric', 'Value']],
        body: summaryData,
        theme: 'grid',
        headStyles: { fillColor: [0, 0, 0], textColor: [255, 255, 255] },
        styles: { fontSize: 10 },
        margin: { left: margin, right: margin }
      });

      yPosition = doc.lastAutoTable.finalY + 20;

      // New Items Added Table
      if (inventoryStats.newItems.length > 0) {
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('New Items Added (Last 7 Days)', margin, yPosition);
        yPosition += 10;

        const newItemsData = inventoryStats.newItems.map(item => [
          item.name,
          formatCurrencyForPDF(item.price),
          `${item.stockQuantity} units`,
          new Date(item.createdAt).toLocaleDateString(),
          'New'
        ]);

        autoTable(doc, {
          startY: yPosition,
          head: [['Product Name', 'Price', 'Stock', 'Date Added', 'Status']],
          body: newItemsData,
          theme: 'striped',
          headStyles: { fillColor: [40, 167, 69], textColor: [255, 255, 255] },
          styles: { fontSize: 9 },
          margin: { left: margin, right: margin }
        });

        yPosition = doc.lastAutoTable.finalY + 20;
      }

      // Check if we need a new page
      if (yPosition > pageHeight - 100) {
        doc.addPage();
        yPosition = margin;
      }

      // Zero Stock Items
      if (inventoryStats.zeroStockItems.length > 0) {
        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Items with Zero Stock (Critical)', margin, yPosition);
        yPosition += 10;

        const zeroStockData = inventoryStats.zeroStockItems.map(item => [
          item.name,
          `0 / ${item.minStockLevel}`,
          formatCurrencyForPDF(item.price),
          'URGENT RESTOCK'
        ]);

        autoTable(doc, {
          startY: yPosition,
          head: [['Product Name', 'Stock Level', 'Price', 'Action Required']],
          body: zeroStockData,
          theme: 'striped',
          headStyles: { fillColor: [220, 53, 69], textColor: [255, 255, 255] },
          styles: { fontSize: 9 },
          margin: { left: margin, right: margin }
        });

        yPosition = doc.lastAutoTable.finalY + 20;
      }

      // Low Stock Items
      const lowStockItems = products.filter(p => p.stockQuantity > 0 && p.stockQuantity <= p.minStockLevel);
      if (lowStockItems.length > 0) {
        // Check if we need a new page
        if (yPosition > pageHeight - 100) {
          doc.addPage();
          yPosition = margin;
        }

        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Low Stock Alerts', margin, yPosition);
        yPosition += 10;

        const lowStockData = lowStockItems.slice(0, 10).map(item => [
          item.name,
          `${item.stockQuantity} / ${item.minStockLevel}`,
          formatCurrencyForPDF(item.price),
          'Restock Soon'
        ]);

        autoTable(doc, {
          startY: yPosition,
          head: [['Product Name', 'Stock Level', 'Price', 'Action Required']],
          body: lowStockData,
          theme: 'striped',
          headStyles: { fillColor: [255, 193, 7], textColor: [0, 0, 0] },
          styles: { fontSize: 9 },
          margin: { left: margin, right: margin }
        });

        yPosition = doc.lastAutoTable.finalY + 20;
      }

      // Recent Stock Updates
      if (inventoryStats.stockUpdates.length > 0) {
        // Check if we need a new page
        if (yPosition > pageHeight - 100) {
          doc.addPage();
          yPosition = margin;
        }

        doc.setFontSize(14);
        doc.setFont('helvetica', 'bold');
        doc.text('Recent Stock Updates', margin, yPosition);
        yPosition += 10;

        const stockUpdatesData = inventoryStats.stockUpdates.slice(0, 10).map(activity => [
          activity.details || `Stock updated for ${activity.productName || 'product'}`,
          activity.userName || 'System',
          new Date(activity.createdAt).toLocaleDateString(),
          activity.action === 'PRODUCT_ADDED' ? 'New Product' : 'Stock Update'
        ]);

        autoTable(doc, {
          startY: yPosition,
          head: [['Activity', 'User', 'Date', 'Type']],
          body: stockUpdatesData,
          theme: 'striped',
          headStyles: { fillColor: [0, 123, 255], textColor: [255, 255, 255] },
          styles: { fontSize: 9 },
          margin: { left: margin, right: margin }
        });
      }

      // Footer
      const totalPages = doc.internal.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        doc.setPage(i);
        doc.setFontSize(8);
        doc.setFont('helvetica', 'normal');
        doc.text(
          `Page ${i} of ${totalPages} | Generated by Inventory Management System`,
          pageWidth / 2,
          pageHeight - 10,
          { align: 'center' }
        );
      }

      // Save the PDF
      const fileName = `Inventory_Overview_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);

    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  if (productsLoading || activitiesLoading) {
    return (
      <div className="inventory-overview-container">
        <div className="loading-state">
          <div className="loading-spinner">
            <i className="bi-arrow-clockwise loading-spin"></i>
          </div>
          <p>Loading inventory data...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="inventory-overview-container">
      <div className="report-content">
        {/* Export Header */}
        <div className="export-header">
          <div className="export-info">
            <h3>Inventory Overview Report</h3>
            <p>Real-time inventory status and analytics</p>
          </div>
          <div className="export-actions">
            <button 
              className={`export-btn ${isExporting ? 'exporting' : ''}`}
              onClick={exportToPDF}
              disabled={isExporting}
            >
              {isExporting ? (
                <>
                  <i className="bi-arrow-clockwise loading-spin"></i>
                  Generating PDF...
                </>
              ) : (
                <>
                  <i className="bi-file-earmark-pdf"></i>
                  Export to PDF
                </>
              )}
            </button>
          </div>
        </div>

        {/* Inventory Metrics */}
        <div className="report-metrics">
          <div className="metric-card">
            <div className="metric-icon">
              <i className="bi-boxes"></i>
            </div>
            <div className="metric-info">
              <h3>{inventoryStats.totalProducts}</h3>
              <p>Total Products</p>
            </div>
          </div>
          <div className="metric-card warning">
            <div className="metric-icon">
              <i className="bi-exclamation-triangle"></i>
            </div>
            <div className="metric-info">
              <h3>{inventoryStats.lowStockItems}</h3>
              <p>Low Stock Items</p>
            </div>
          </div>
          <div className="metric-card danger">
            <div className="metric-icon">
              <i className="bi-x-circle"></i>
            </div>
            <div className="metric-info">
              <h3>{inventoryStats.outOfStockItems}</h3>
              <p>Out of Stock</p>
            </div>
          </div>
          <div className="metric-card">
            <div className="metric-icon">
              <i className="bi-currency-dollar"></i>
            </div>
            <div className="metric-info">
              <h3>{formatCurrency(inventoryStats.totalValue)}</h3>
              <p>Total Inventory Value</p>
            </div>
          </div>
        </div>

        <div className="report-sections">
          {/* New Items Added - Table Layout */}
          <div className="report-section">
            <h4>
              <i className="bi-plus-circle" style={{ marginRight: '8px', color: '#28a745' }}></i>
              New Items Added (Last 7 Days)
            </h4>
            {inventoryStats.newItems.length > 0 ? (
              <div className="table-container">
                <table className="inventory-table">
                  <thead>
                    <tr>
                      <th>Product Name</th>
                      <th>Price</th>
                      <th>Stock Quantity</th>
                      <th>Date Added</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {inventoryStats.newItems.map((item) => (
                      <tr key={item.id}>
                        <td className="product-name-cell">
                          <div className="product-info">
                            <i className="bi-box-seam" style={{ marginRight: '8px', color: '#28a745' }}></i>
                            <span className="product-name">{item.name}</span>
                          </div>
                        </td>
                        <td className="price-cell">{formatCurrency(item.price)}</td>
                        <td className="stock-cell">
                          <span className="stock-badge">{item.stockQuantity} units</span>
                        </td>
                        <td className="date-cell">
                          {new Date(item.createdAt).toLocaleDateString()}
                        </td>
                        <td className="status-cell">
                          <span className="status-badge new">New</span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="no-data" style={{ padding: '20px' }}>
                <i className="bi-inbox"></i>
                <p>No new items added in the last 7 days</p>
              </div>
            )}
          </div>

          {/* Recent Stock Updates - Row Layout */}
          <div className="report-section">
            <h4>
              <i className="bi-arrow-up-circle" style={{ marginRight: '8px', color: '#007bff' }}></i>
              Recent Stock Updates
            </h4>
            {inventoryStats.stockUpdates.length > 0 ? (
              <div className="row-list">
                {inventoryStats.stockUpdates.map((activity, index) => (
                  <div key={index} className="row-item">
                    <div className="row-icon">
                      <i className={activity.action === 'PRODUCT_ADDED' ? 'bi-plus-circle' : 'bi-arrow-up-circle'} 
                         style={{ color: activity.action === 'PRODUCT_ADDED' ? '#28a745' : '#007bff' }}></i>
                    </div>
                    <div className="row-content">
                      <div className="row-main">
                        <span className="row-title">{activity.details || `Stock updated for ${activity.productName || 'product'}`}</span>
                        <span className="row-badge">
                          {activity.action === 'PRODUCT_ADDED' ? 'New Product' : 'Stock Update'}
                        </span>
                      </div>
                      <div className="row-meta">
                        <span className="row-user">
                          <i className="bi-person" style={{ marginRight: '4px' }}></i>
                          {activity.userName}
                        </span>
                        <span className="row-time">
                          <i className="bi-clock" style={{ marginRight: '4px' }}></i>
                          {new Date(activity.createdAt).toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-data" style={{ padding: '20px' }}>
                <i className="bi-clock-history"></i>
                <p>No recent stock updates</p>
              </div>
            )}
          </div>

          {/* Zero Stock Items - Row Layout */}
          <div className="report-section">
            <h4>
              <i className="bi-exclamation-octagon" style={{ marginRight: '8px', color: '#dc3545' }}></i>
              Items with Zero Stock
            </h4>
            {inventoryStats.zeroStockItems.length > 0 ? (
              <div className="row-list">
                {inventoryStats.zeroStockItems.map((item) => (
                  <div key={item.id} className="row-item critical">
                    <div className="row-icon">
                      <i className="bi-exclamation-triangle" style={{ color: '#dc3545' }}></i>
                    </div>
                    <div className="row-content">
                      <div className="row-main">
                        <span className="row-title">{item.name}</span>
                        <span className="row-badge critical">Out of Stock</span>
                      </div>
                      <div className="row-meta">
                        <span className="row-stock critical">
                          <i className="bi-box" style={{ marginRight: '4px' }}></i>
                          0 / {item.minStockLevel} units
                        </span>
                        <span className="row-price">
                          <i className="bi-currency-dollar" style={{ marginRight: '4px' }}></i>
                          {formatCurrency(item.price)} each
                        </span>
                        <span className="row-action">
                          <i className="bi-arrow-clockwise" style={{ marginRight: '4px' }}></i>
                          Urgent Restock
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="no-data" style={{ padding: '20px' }}>
                <i className="bi-check-circle" style={{ color: '#28a745' }}></i>
                <p style={{ color: '#28a745' }}>All items are in stock!</p>
              </div>
            )}
          </div>

          {/* Low Stock Alerts - Row Layout */}
          <div className="report-section">
            <h4>
              <i className="bi-exclamation-triangle" style={{ marginRight: '8px', color: '#ffc107' }}></i>
              Low Stock Alerts
            </h4>
            {products.filter(p => p.stockQuantity > 0 && p.stockQuantity <= p.minStockLevel).length > 0 ? (
              <div className="row-list">
                {products
                  .filter(p => p.stockQuantity > 0 && p.stockQuantity <= p.minStockLevel)
                  .slice(0, 5)
                  .map((item) => (
                    <div key={item.id} className="row-item warning">
                      <div className="row-icon">
                        <i className="bi-exclamation-triangle" style={{ color: '#ffc107' }}></i>
                      </div>
                      <div className="row-content">
                        <div className="row-main">
                          <span className="row-title">{item.name}</span>
                          <span className="row-badge warning">Low Stock</span>
                        </div>
                        <div className="row-meta">
                          <span className="row-stock warning">
                            <i className="bi-box" style={{ marginRight: '4px' }}></i>
                            {item.stockQuantity} / {item.minStockLevel} units
                          </span>
                          <span className="row-price">
                            <i className="bi-currency-dollar" style={{ marginRight: '4px' }}></i>
                            {formatCurrency(item.price)} each
                          </span>
                          <span className="row-action">
                            <i className="bi-clock" style={{ marginRight: '4px' }}></i>
                            Restock Soon
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}
              </div>
            ) : (
              <div className="no-data" style={{ padding: '20px' }}>
                <i className="bi-check-circle" style={{ color: '#28a745' }}></i>
                <p style={{ color: '#28a745' }}>No low stock alerts!</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default InventoryOverview;